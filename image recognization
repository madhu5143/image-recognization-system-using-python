pip install flask tensorflow numpy pillow
from flask import Flask, render_template_string, request
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D
from tensorflow.keras.datasets import cifar10
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.preprocessing import image
import numpy as np
import os

# ---------------- Train and Save the Model ----------------
print("Training model...")

# Load CIFAR-10 dataset
(x_train, y_train), (x_test, y_test) = cifar10.load_data()
y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)

# Build a simple CNN
model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(32,32,3)),
    MaxPooling2D(2,2),
    Flatten(),
    Dense(64, activation='relu'),
    Dense(10, activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model.fit(x_train, y_train, epochs=3, validation_data=(x_test, y_test))
model.save('model.h5')
print("Model trained and saved as model.h5")

# ---------------- Flask Web Application ----------------
print("Starting Flask app...")

app = Flask(__name__)

model = load_model('model.h5')
class_names = ['Airplane', 'Automobile', 'Bird', 'Cat', 'Deer', 'Dog', 'Frog', 'Horse', 'Ship', 'Truck']

UPLOAD_FOLDER = 'uploads'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

HTML_PAGE = '''
<h2>Image Recognition - Upload an Image</h2>
<form action="/" method="POST" enctype="multipart/form-data">
    <input type="file" name="file" required>
    <button type="submit">Predict</button>
</form>

{% if prediction %}
    <h3>Prediction: {{ prediction }}</h3>
    <img src="{{ image_path }}" width="150">
{% endif %}
'''

@app.route('/', methods=['GET', 'POST'])
def index():
    prediction = None
    image_path = None
    if request.method == 'POST':
        file = request.files['file']
        if file:
            filepath = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
            file.save(filepath)
            
            # Preprocess image
            img = image.load_img(filepath, target_size=(32, 32))
            img_array = image.img_to_array(img) / 255.0
            img_array = np.expand_dims(img_array, axis=0)
            
            preds = model.predict(img_array)
            predicted_class = class_names[np.argmax(preds)]
            
            prediction = predicted_class
            image_path = filepath

    return render_template_string(HTML_PAGE, prediction=prediction, image_path=image_path)

if __name__ == "__main__":
    app.run(debug=True)
